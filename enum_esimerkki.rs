// Rust enum -esimerkit
#[derive(Debug)]
enum Viikonp√§iv√§ {
    Maanantai,
    Tiistai,
    Keskiviikko,
    Torstai,
    Perjantai,
    Lauantai,
    Sunnuntai,
}

// Enum, joka voi sis√§lt√§√§ dataa
#[derive(Debug)]
enum S√§√§ {
    Aurinkoinen(i32),           // l√§mp√∂tila
    Sateinen { sadekorkeus: f64 }, // nimetty kentt√§
    Luminen,                    // ei dataa
    Tuulinen(i32, String),      // l√§mp√∂tila ja tuulen suunta
}

// Enum message-systeemille
#[derive(Debug)]
enum Viesti {
    Lopeta,
    Siirr√§ { x: i32, y: i32 },
    Kirjoita(String),
    MuutaV√§ri(i32, i32, i32), // RGB
}

impl Viikonp√§iv√§ {
    fn on_viikonloppu(&self) -> bool {
        match self {
            Viikonp√§iv√§::Lauantai | Viikonp√§iv√§::Sunnuntai => true,
            _ => false,
        }
    }
    
    fn seuraava_p√§iv√§(&self) -> Viikonp√§iv√§ {
        match self {
            Viikonp√§iv√§::Maanantai => Viikonp√§iv√§::Tiistai,
            Viikonp√§iv√§::Tiistai => Viikonp√§iv√§::Keskiviikko,
            Viikonp√§iv√§::Keskiviikko => Viikonp√§iv√§::Torstai,
            Viikonp√§iv√§::Torstai => Viikonp√§iv√§::Perjantai,
            Viikonp√§iv√§::Perjantai => Viikonp√§iv√§::Lauantai,
            Viikonp√§iv√§::Lauantai => Viikonp√§iv√§::Sunnuntai,
            Viikonp√§iv√§::Sunnuntai => Viikonp√§iv√§::Maanantai,
        }
    }
}

fn k√§sittele_s√§√§(s√§√§: &S√§√§) {
    match s√§√§ {
        S√§√§::Aurinkoinen(l√§mp√∂tila) => {
            if *l√§mp√∂tila > 20 {
                println!("Kaunis aurinkoinen p√§iv√§! {}¬∞C - Hyv√§ p√§iv√§ ulkoiluun! ‚òÄÔ∏è", l√§mp√∂tila);
            } else {
                println!("Aurinkoista mutta hieman viile√§√§: {}¬∞C", l√§mp√∂tila);
            }
        }
        S√§√§::Sateinen { sadekorkeus } => {
            println!("Sataa {}mm. Muista sateenvarjo! üåßÔ∏è", sadekorkeus);
        }
        S√§√§::Luminen => {
            println!("Lumisadetta! Talvivaatteet p√§√§lle! ‚ùÑÔ∏è");
        }
        S√§√§::Tuulinen(l√§mp√∂tila, suunta) => {
            println!("Tuulista {}¬∞C, tuuli puhaltaa {}:sta üí®", l√§mp√∂tila, suunta);
        }
    }
}

fn prosessoi_viesti(viesti: Viesti) {
    match viesti {
        Viesti::Lopeta => {
            println!("Lopetetaan ohjelma...");
        }
        Viesti::Siirr√§ { x, y } => {
            println!("Siirret√§√§n positioon ({}, {})", x, y);
        }
        Viesti::Kirjoita(teksti) => {
            println!("Kirjoitetaan: '{}'", teksti);
        }
        Viesti::MuutaV√§ri(r, g, b) => {
            println!("Vaihdetaan v√§riksi RGB({}, {}, {})", r, g, b);
        }
    }
}

fn main() {
    println!("=== Rust Enum -esimerkit ===\n");
    
    // Yksinkertaiset enumit
    println!("--- Viikonp√§iv√§t ---");
    let t√§n√§√§n = Viikonp√§iv√§::Keskiviikko;
    println!("T√§n√§√§n on {:?}", t√§n√§√§n);
    println!("Onko viikonloppu? {}", t√§n√§√§n.on_viikonloppu());
    println!("Huomenna on {:?}", t√§n√§√§n.seuraava_p√§iv√§());
    
    let viikonloppu = Viikonp√§iv√§::Lauantai;
    println!("Lauantai - viikonloppu? {}", viikonloppu.on_viikonloppu());
    
    // Enumit datalla
    println!("\n--- S√§√§tiedot ---");
    let s√§√§tilat = vec![
        S√§√§::Aurinkoinen(25),
        S√§√§::Sateinen { sadekorkeus: 3.2 },
        S√§√§::Luminen,
        S√§√§::Tuulinen(15, "pohjoisesta".to_string()),
        S√§√§::Aurinkoinen(18),
    ];
    
    for s√§√§ in &s√§√§tilat {
        k√§sittele_s√§√§(s√§√§);
    }
    
    // Viesti-enum
    println!("\n--- Viestien k√§sittely ---");
    let viestit = vec![
        Viesti::Kirjoita("Hei maailma!".to_string()),
        Viesti::Siirr√§ { x: 100, y: 200 },
        Viesti::MuutaV√§ri(255, 0, 128),
        Viesti::Lopeta,
    ];
    
    for viesti in viestit {
        prosessoi_viesti(viesti);
    }
    
    // Option ja Result (Rustin sis√§√§nrakennetut enumit)
    println!("\n--- Option ja Result enumit ---");
    
    // Option<T> esimerkki
    let numerot = vec![1, 2, 3, 4, 5];
    match numerot.get(2) {
        Some(arvo) => println!("Indeksi 2: {}", arvo),
        None => println!("Indeksi 2 ei l√∂ydy"),
    }
    
    match numerot.get(10) {
        Some(arvo) => println!("Indeksi 10: {}", arvo),
        None => println!("Indeksi 10 ei l√∂ydy"),
    }
    
    // Result<T, E> esimerkki
    let luku_str = "123";
    match luku_str.parse::<i32>() {
        Ok(luku) => println!("Parsittiin onnistuneesti: {}", luku),
        Err(e) => println!("Parsinta ep√§onnistui: {}", e),
    }
    
    let huono_luku = "abc";
    match huono_luku.parse::<i32>() {
        Ok(luku) => println!("Parsittiin: {}", luku),
        Err(e) => println!("'{}' ei ole validi luku: {}", huono_luku, e),
    }
}
